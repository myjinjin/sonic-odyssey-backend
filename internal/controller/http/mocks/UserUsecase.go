// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	usecase "github.com/myjinjin/sonic-odyssey-backend/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// SendPasswordRecoveryEmail provides a mock function with given fields: baseURL, email
func (_m *UserUsecase) SendPasswordRecoveryEmail(baseURL string, email string) error {
	ret := _m.Called(baseURL, email)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordRecoveryEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(baseURL, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignUp provides a mock function with given fields: _a0
func (_m *UserUsecase) SignUp(_a0 usecase.SignUpInput) (*usecase.SignUpOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 *usecase.SignUpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(usecase.SignUpInput) (*usecase.SignUpOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(usecase.SignUpInput) *usecase.SignUpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.SignUpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(usecase.SignUpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
