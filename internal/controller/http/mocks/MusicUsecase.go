// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/myjinjin/sonic-odyssey-backend/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// MusicUsecase is an autogenerated mock type for the MusicUsecase type
type MusicUsecase struct {
	mock.Mock
}

// SearchTrack provides a mock function with given fields: ctx, keyword, limit, offset
func (_m *MusicUsecase) SearchTrack(ctx context.Context, keyword string, limit *int, offset *int) (*usecase.SearchTrackOutput, error) {
	ret := _m.Called(ctx, keyword, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchTrack")
	}

	var r0 *usecase.SearchTrackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *int, *int) (*usecase.SearchTrackOutput, error)); ok {
		return rf(ctx, keyword, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *int, *int) *usecase.SearchTrackOutput); ok {
		r0 = rf(ctx, keyword, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.SearchTrackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *int, *int) error); ok {
		r1 = rf(ctx, keyword, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMusicUsecase creates a new instance of MusicUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMusicUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MusicUsecase {
	mock := &MusicUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
