// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/myjinjin/sonic-odyssey-backend/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// PasswordResetFlowRepository is an autogenerated mock type for the PasswordResetFlowRepository type
type PasswordResetFlowRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: flow
func (_m *PasswordResetFlowRepository) Create(flow *entities.PasswordResetFlow) error {
	ret := _m.Called(flow)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.PasswordResetFlow) error); ok {
		r0 = rf(flow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByFlowID provides a mock function with given fields: flowID
func (_m *PasswordResetFlowRepository) DeleteByFlowID(flowID string) error {
	ret := _m.Called(flowID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFlowID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(flowID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByFlowID provides a mock function with given fields: flowID
func (_m *PasswordResetFlowRepository) FindByFlowID(flowID string) (*entities.PasswordResetFlow, error) {
	ret := _m.Called(flowID)

	if len(ret) == 0 {
		panic("no return value specified for FindByFlowID")
	}

	var r0 *entities.PasswordResetFlow
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.PasswordResetFlow, error)); ok {
		return rf(flowID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.PasswordResetFlow); ok {
		r0 = rf(flowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PasswordResetFlow)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(flowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: userID
func (_m *PasswordResetFlowRepository) FindByUserID(userID uint) (*entities.PasswordResetFlow, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 *entities.PasswordResetFlow
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entities.PasswordResetFlow, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *entities.PasswordResetFlow); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PasswordResetFlow)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPasswordResetFlowRepository creates a new instance of PasswordResetFlowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordResetFlowRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordResetFlowRepository {
	mock := &PasswordResetFlowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
