definitions:
  auth.LoginRequest:
    properties:
      email:
        example: odyssey@example.com
        type: string
      password:
        example: Example123!
        type: string
    type: object
  auth.LoginResponse:
    properties:
      expires_at:
        example: "2024-05-30T09:00:00Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    type: object
  auth.UnauthorizedResponse:
    properties:
      error:
        example: incorrect Username or Password
        type: string
    type: object
  v1.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  v1.GetMyUserInfoResponse:
    properties:
      bio:
        example: bio...
        type: string
      email:
        example: user@example.com
        type: string
      name:
        example: name
        type: string
      nickname:
        example: nickname
        type: string
      profile_image_url:
        example: https://example.com/profile.png
        type: string
      user_id:
        example: 1
        type: integer
      website:
        example: https://example.com
        type: string
    type: object
  v1.PatchMyUserRequest:
    properties:
      bio:
        example: newbio
        type: string
      name:
        example: newname
        minLength: 2
        type: string
      nickname:
        example: newnickname
        minLength: 5
        type: string
      website:
        example: https://example.com/new
        type: string
    type: object
  v1.PatchMyUserResponse:
    type: object
  v1.ResetPasswordRequest:
    properties:
      flow_id:
        example: cc833698-4519-4873-b9b4-67d6fef70dcb:1717170088
        type: string
      password:
        example: Password123!
        minLength: 8
        type: string
    required:
    - flow_id
    - password
    type: object
  v1.ResetPasswordResponse:
    type: object
  v1.SendPasswordRecoveryEmailRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  v1.SendPasswordRecoveryEmailResponse:
    type: object
  v1.SignUpRequest:
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: John Doe
        type: string
      nickname:
        example: johndoe
        type: string
      password:
        example: Password123!
        minLength: 8
        type: string
    required:
    - email
    - name
    - nickname
    - password
    type: object
  v1.SignUpResponse:
    properties:
      user_id:
        example: 1
        type: integer
    type: object
  v1.UpdatePasswordRequest:
    properties:
      curr_password:
        example: Password123!
        minLength: 8
        type: string
      new_password:
        example: NewPassword123!
        minLength: 8
        type: string
    required:
    - curr_password
    - new_password
    type: object
  v1.UpdatePasswordResponse:
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/sign-in:
    post:
      consumes:
      - application/json
      description: Responds with a JWT token and expiration time upon successful login
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.UnauthorizedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.UnauthorizedResponse'
      summary: User Login
      tags:
      - auth
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: User SignUp
      parameters:
      - description: SignUp Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: User SignUp
      tags:
      - users
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: JWT 인증 토큰 기반 내 유저 정보 조회
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.GetMyUserInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my user info
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: JWT 인증 토큰 기반 내 유저 정보 업데이트
      parameters:
      - description: PatchMyUser Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.PatchMyUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.PatchMyUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Patch my user info
      tags:
      - users
  /api/v1/users/me/password:
    put:
      consumes:
      - application/json
      description: JWT 인증 토큰 기반 내 비밀번호 수정
      parameters:
      - description: UpdatePassword Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.UpdatePasswordResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update my user password
      tags:
      - users
  /api/v1/users/password/recovery:
    post:
      consumes:
      - application/json
      description: 비밀번호 복구 이메일 전송
      parameters:
      - description: SendPasswordRecoveryEmailRequest Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.SendPasswordRecoveryEmailRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.SendPasswordRecoveryEmailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Send password recovery email
      tags:
      - users
  /api/v1/users/password/reset:
    post:
      consumes:
      - application/json
      description: 비밀번호 재설정
      parameters:
      - description: ResetPasswordRequest Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Reset password
      tags:
      - users
swagger: "2.0"
